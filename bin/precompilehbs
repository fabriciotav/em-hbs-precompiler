#!/usr/bin/env node

var fs = require('fs'),
    walk = require('walk'),
    program = require('commander'),
    compiler = require('../lib/ember/ember-template-compiler');

var colors = ['\u001b[0m', '\u001b[31m', '\u001b[32m', '\u001b[33m']; // reset, red, green, yellow

program
  .version('2.2.0')
  .option('-s, --source [dir]', 'Source directory')
  .option('-o, --output [filename]', 'Output file')
  .parse(process.argv);

// Check if the options hold
if (program.source === undefined || fs.existsSync(program.source) === false) {
  console.log(colors[1] + '    error:    ' + colors[0] + 'Needs source directory.');
  process.exit(1);
}

if (program.output === undefined) {
  console.log(colors[1] + '    error:    ' + colors[0] + 'Needs output filename.');
  process.exit(1);
}

var templates = [];
var walker = walk.walk(program.source, { followLinks: false });
walker.on('file', function (root, fileStats, next) {

  if (fileStats.name.charAt(0) !== '.') {
    var path = root + '/' + fileStats.name;
    var name = path.replace(/(\.handlebars|\.hbs)$/, '').replace(program.source + '/', '');
    
    templates.push({
      name: name,
      content: fs.readFileSync(path).toString()
    });
  }

  next();
});

walker.on('end', function () {
  compile(templates)
});

function compile() {
  var templatesStrings = [], all;

  var n = templates.length;
  for (var i = 0; i < n; i++) {
    var input = compiler.precompile(templates[i].content, false).toString();
    var output = "Ember.TEMPLATES['" + templates[i].name + "'] = Ember.HTMLBars.template(" + input + ");";
    templatesStrings.push(output);
  }

  all = templatesStrings.join('\n');
  
  fs.writeFile(program.output, all, { encoding: 'utf8' }, function(err) {
    if (err) console.log(colors[1] + '    error:    ' + colors[0] + 'Error while compiling.');

    console.log(colors[2] + '    created:    ' + colors[0] + program.output);
  });
}
